name: iOS IPA Build

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      export_method:
        description: "Optional export method override (app-store, development, release-testing, enterprise)"
        required: false
        default: ""

jobs:
  build-ipa:
    runs-on: macos-latest
    env:
      PROJECT_PATH: split-instant.xcodeproj
      SCHEME: NotesApp
      ARCHIVE_PATH: ${{ runner.temp }}/SplitInstant.xcarchive
      EXPORT_PATH: ${{ runner.temp }}/export
      IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
      P12_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Select latest stable Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Show Xcode and project info
        run: |
          set -euo pipefail
          xcodebuild -version
          xcodebuild -list -project "$PROJECT_PATH"

      - name: Import signing certificate
        if: env.P12_BASE64 != ''
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ env.P12_BASE64 }}
          p12-password: ${{ env.P12_PASSWORD }}

      - name: Install provisioning profile
        if: env.PROVISIONING_PROFILE_BASE64 != ''
        run: |
          set -euo pipefail
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
          PROFILE_PATH="$PROFILE_DIR/profile.mobileprovision"
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > "$PROFILE_PATH"
          PROFILE_PLIST="$RUNNER_TEMP/profile.plist"
          security cms -D -i "$PROFILE_PATH" > "$PROFILE_PLIST"
          PP_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$PROFILE_PLIST")
          PP_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PROFILE_PLIST")
          APP_IDENTIFIER=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' "$PROFILE_PLIST")
          BUNDLE_ID=${APP_IDENTIFIER#*.}
          {
            echo "PP_UUID=$PP_UUID"
            echo "PP_NAME=$PP_NAME"
            echo "BUNDLE_ID=$BUNDLE_ID"
            echo "PROFILE_PLIST=$PROFILE_PLIST"
          } >> "$GITHUB_ENV"
          echo "Installed provisioning profile: $PP_NAME ($PP_UUID) for $BUNDLE_ID"

      - name: Resolve Swift packages (if any)
        run: |
          xcodebuild -resolvePackageDependencies -project "$PROJECT_PATH" -scheme "$SCHEME" -clonedSourcePackagesDirPath "$RUNNER_TEMP/SPM"

      - name: Archive split-instant (Release)
        run: |
          set -eo pipefail
          xcodebuild archive \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${IOS_TEAM_ID}" \
            PROVISIONING_PROFILE_SPECIFIER="${PP_NAME:-$PP_UUID}" \
            PRODUCT_BUNDLE_IDENTIFIER="${BUNDLE_ID:-com.split.instant}" \
            -allowProvisioningUpdates

      - name: Create ExportOptions.plist
        run: |
          set -euo pipefail
          PLIST_PATH="${PROFILE_PLIST:-}"
          METHOD="app-store"
          if [ -n "$PLIST_PATH" ] && [ -f "$PLIST_PATH" ]; then
            GET_TASK_ALLOW=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:get-task-allow' "$PLIST_PATH" 2>/dev/null || echo false)
            HAS_DEVICES=false
            if /usr/libexec/PlistBuddy -c 'Print :ProvisionedDevices' "$PLIST_PATH" >/dev/null 2>&1; then HAS_DEVICES=true; fi
            IS_ENTERPRISE=$(/usr/libexec/PlistBuddy -c 'Print :ProvisionsAllDevices' "$PLIST_PATH" 2>/dev/null || echo false)
            if [ "$GET_TASK_ALLOW" = "true" ]; then
              METHOD="development"
            elif [ "$IS_ENTERPRISE" = "true" ]; then
              METHOD="enterprise"
            elif [ "$HAS_DEVICES" = "true" ]; then
              METHOD="release-testing"
            fi
          fi
          USER_METHOD="${{ inputs.export_method }}"
          if [ -n "$USER_METHOD" ]; then
            if [ "$USER_METHOD" = "ad-hoc" ]; then USER_METHOD="release-testing"; fi
            METHOD="$USER_METHOD"
          fi
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${METHOD}</string>
            <key>teamID</key>
            <string>${IOS_TEAM_ID}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID:-com.split.instant}</key>
              <string>${PP_NAME:-$PP_UUID}</string>
            </dict>
            <key>destination</key>
            <string>export</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
          echo "ExportOptions plist ready (method: $METHOD)"

      - name: Export IPA
        run: |
          set -eo pipefail
          mkdir -p "$EXPORT_PATH"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath "$EXPORT_PATH" \
            -allowProvisioningUpdates
          ls "$EXPORT_PATH"

      - name: Verify IPA artifact
        run: |
          set -euo pipefail
          IPA=$(ls "$EXPORT_PATH"/*.ipa | head -n1 || true)
          if [ -z "$IPA" ]; then
            echo "::error::IPA not found in $EXPORT_PATH"
            exit 1
          fi
          SIZE_BYTES=$(stat -f%z "$IPA" 2>/dev/null || stat -c%s "$IPA")
          echo "IPA ready: $(basename "$IPA") - ${SIZE_BYTES} bytes"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: split-instant-ipa-${{ github.run_number }}
          path: ${{ env.EXPORT_PATH }}/*.ipa
